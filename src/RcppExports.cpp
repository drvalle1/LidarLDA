// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rmultinom_1
IntegerVector rmultinom_1(NumericVector probs, int size);
RcppExport SEXP _LidarLDA_rmultinom_1(SEXP probsSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(rmultinom_1(probs, size));
    return rcpp_result_gen;
END_RCPP
}
// samplez1
List samplez1(NumericMatrix theta, NumericMatrix phi, IntegerMatrix y, int nclust, int npix, int nheight, NumericVector zeroes);
RcppExport SEXP _LidarLDA_samplez1(SEXP thetaSEXP, SEXP phiSEXP, SEXP ySEXP, SEXP nclustSEXP, SEXP npixSEXP, SEXP nheightSEXP, SEXP zeroesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type nclust(nclustSEXP);
    Rcpp::traits::input_parameter< int >::type npix(npixSEXP);
    Rcpp::traits::input_parameter< int >::type nheight(nheightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type zeroes(zeroesSEXP);
    rcpp_result_gen = Rcpp::wrap(samplez1(theta, phi, y, nclust, npix, nheight, zeroes));
    return rcpp_result_gen;
END_RCPP
}
// samplez0
List samplez0(NumericMatrix theta, NumericMatrix OneMinusPhi, IntegerMatrix NminusY, int nclust, int npix, int nheight, NumericVector zeroes);
RcppExport SEXP _LidarLDA_samplez0(SEXP thetaSEXP, SEXP OneMinusPhiSEXP, SEXP NminusYSEXP, SEXP nclustSEXP, SEXP npixSEXP, SEXP nheightSEXP, SEXP zeroesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type OneMinusPhi(OneMinusPhiSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type NminusY(NminusYSEXP);
    Rcpp::traits::input_parameter< int >::type nclust(nclustSEXP);
    Rcpp::traits::input_parameter< int >::type npix(npixSEXP);
    Rcpp::traits::input_parameter< int >::type nheight(nheightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type zeroes(zeroesSEXP);
    rcpp_result_gen = Rcpp::wrap(samplez0(theta, OneMinusPhi, NminusY, nclust, npix, nheight, zeroes));
    return rcpp_result_gen;
END_RCPP
}
// convertVtoTheta
NumericMatrix convertVtoTheta(NumericMatrix vmat, NumericVector prod);
RcppExport SEXP _LidarLDA_convertVtoTheta(SEXP vmatSEXP, SEXP prodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type vmat(vmatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prod(prodSEXP);
    rcpp_result_gen = Rcpp::wrap(convertVtoTheta(vmat, prod));
    return rcpp_result_gen;
END_RCPP
}
// ngreater
IntegerMatrix ngreater(IntegerMatrix nlk, int npix, int nclust);
RcppExport SEXP _LidarLDA_ngreater(SEXP nlkSEXP, SEXP npixSEXP, SEXP nclustSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type nlk(nlkSEXP);
    Rcpp::traits::input_parameter< int >::type npix(npixSEXP);
    Rcpp::traits::input_parameter< int >::type nclust(nclustSEXP);
    rcpp_result_gen = Rcpp::wrap(ngreater(nlk, npix, nclust));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LidarLDA_rmultinom_1", (DL_FUNC) &_LidarLDA_rmultinom_1, 2},
    {"_LidarLDA_samplez1", (DL_FUNC) &_LidarLDA_samplez1, 7},
    {"_LidarLDA_samplez0", (DL_FUNC) &_LidarLDA_samplez0, 7},
    {"_LidarLDA_convertVtoTheta", (DL_FUNC) &_LidarLDA_convertVtoTheta, 2},
    {"_LidarLDA_ngreater", (DL_FUNC) &_LidarLDA_ngreater, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_LidarLDA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
